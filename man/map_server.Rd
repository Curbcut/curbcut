% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_module.R
\name{map_server}
\alias{map_server}
\alias{map_UI}
\title{Creates a Map Server Shiny module using Rdeck library}
\usage{
map_server(
  id,
  r,
  tile,
  data_colours,
  select_id,
  zoom_levels,
  zoom,
  coords,
  fill_fun = shiny::reactive(map_scale_fill),
  tileset_ID_color = shiny::reactive("ID_color"),
  fill_args = shiny::reactive(list(data_colours(), tileset_ID_color =
    tileset_ID_color())),
  colour_fun = shiny::reactive(map_scale_colour),
  colour_args = shiny::reactive(list(select_id = select_id(), data_colours(),
    tileset_ID_color = tileset_ID_color())),
  lwd_fun = shiny::reactive(map_scale_lwd),
  lwd_args = shiny::reactive(list(select_id = select_id(), tile = tile(), zoom = zoom(),
    zoom_levels = zoom_levels(), lwd = 1)),
  auto_highlight = shiny::reactive(TRUE),
  pickable = shiny::reactive(TRUE),
  extrude = shiny::reactive(TRUE),
  mapbox_username = get_from_globalenv("mapbox_username"),
  tileset_prefix = get_from_globalenv("tileset_prefix"),
  map_base_style = get_from_globalenv("map_base_style")
)

map_UI(id)
}
\arguments{
\item{id}{<\code{character}> The ID of the page in which this module will appear,
e.g. \code{canale}.}

\item{r}{<\code{reactiveValues}> The reactive values shared between modules and
pages. Created in the \code{server.R} file. The output of \code{\link{r_init}}.}

\item{tile}{<\verb{reactive character}> A reactive string with the map tile to
be used. Either a combination of a region with auto-scale (e.g. \code{city_auto_zoom})
or a combination of a region and a scale (e.g. \code{city_DA}). The output of
\code{\link{zoom_server}}.}

\item{data_colours}{<\verb{reactive data.frame}> The output of
\code{\link{data_get_colours}}. Used for the fill colour of the
polygons.}

\item{select_id}{<\verb{reactive character}> The ID of the selected polygon.}

\item{zoom_levels}{<\verb{named numeric vector}> A named numeric vector of zoom
levels. Usually one of the \code{map_zoom_levels_x}, or the output of
\code{\link{zoom_get_levels}}. It needs to be \code{numeric} as the function
will sort them to make sure the lower zoom level is first, and the highest
is last (so it makes sense on an auto-scale).}

\item{zoom}{<\verb{reactive numeric}> The current zoom level of the map, also
the zoom at which the map will initiate. Usually \code{r[[id]]$zoom}}

\item{coords}{<\verb{reactive numeric vector}> The current central map location
of the map. Bookmark can have an input on it. Usually \code{r[[id]]$coords}.}

\item{fill_fun}{<\verb{reactive function}> A function used to calculate the fill color of
the polygons. It needs to be created using \code{\link[rdeck]{scale_color_category}}.
Defaults to \code{\link{map_scale_fill}}.}

\item{tileset_ID_color}{<\verb{reactive character}> Which is the column of the mapbox tileset
that should be caught to display colours. Defaults to \code{ID_color}. All scales
have their ID duplicated at the ID_color, except buildings, streets, and other
large scales. Their ID_color is then the ID of the DA in which they fall. This
can be switched to \code{ID} if buildings or streets have their own data (and they
don't just display the value of their DA).}

\item{fill_args}{<\verb{reactive list}> List of arguments to be passed to the
\code{fill_fun} argument.}

\item{colour_fun}{<\verb{reactive function}> A function used to calculate the line color of
the polygons. \code{\link{map_scale_colour}}.}

\item{colour_args}{<\verb{reactive list}> List of arguments to be passed to the
\code{colour_fun} argument.}

\item{lwd_fun}{<\verb{reactive function}> A function used to calculate the border width of
the polygons. It needs to be created using \code{\link[rdeck]{scale_category}}.
\code{\link{map_scale_lwd}}.}

\item{lwd_args}{<\verb{reactive list}> List of arguments to be passed to the
\code{lwd_fun} argument.}

\item{auto_highlight}{<\verb{reactive logical}> When TRUE, the current object hovered by
the cursor is highlighted.}

\item{pickable}{<\verb{reactive logical}> Determines if the layer responds to pointer /
touch events.}

\item{extrude}{<\verb{reactive logical}> Whether to use \code{\link{map_label_show_texture}}
to determine if polygons should be extrude.}

\item{mapbox_username}{<\code{character}> Mapbox account username. Defaults to
grabbing the \code{mapbox_username} object from the global environment.}

\item{tileset_prefix}{<\code{character}> Prefix attached to every tileset. Should
correspond to the Curbcut city, e.g. \code{mtl}. Defaults to grabbing the
\code{tileset_prefix} object from the global environment.}

\item{map_base_style}{<\code{character}> The mapbox basemap style url.
See https://docs.mapbox.com/api/maps/#mapbox-styles}
}
\value{
The server function returns the map viewstate coming from
\code{\link[rdeck]{get_view_state}}.
}
\description{
This function is a Shiny module that generates an interactive map using the
\code{rdeck} package. The map displays data in the form of MVT (Mapbox Vector Tile)
layers with customizable colors and line widths. Arguments control the shown
MVT and the aesthetic of the map. The function also requires several global
environment variables to be set in order to work properly.
}
\section{Functions}{
\itemize{
\item \code{map_UI()}: Create the UI for the map module

}}
