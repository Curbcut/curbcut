% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/legend_module.R
\name{legend_server}
\alias{legend_server}
\alias{legend_UI}
\title{Create the server logic for the legend module}
\usage{
legend_server(
  id,
  r,
  vars,
  data,
  df,
  hide = shiny::reactive(FALSE),
  build_str_as_DA = shiny::reactive(TRUE),
  breaks = shiny::reactive(NULL)
)

legend_UI(id)
}
\arguments{
\item{id}{<\code{character}> The ID of the page in which the legend will appear,
e.g. \code{canale}.}

\item{r}{<\code{reactiveValues}> The reactive values shared between modules and
pages. Created in the \code{server.R} file.}

\item{vars}{<\verb{named list}> Named list with a class. Object build using the
\code{\link[curbcut]{build_vars}} function.}

\item{data}{<\verb{reactive data.frame}> Data frame containing all the scale and
the \code{var_left} and \code{var_right}. The output of \code{\link[curbcut]{get_data}}.}

\item{df}{<\verb{reactive character}> The combination of the region under study
and the scale at which the user is on, e.g. \code{CMA_CSD}.}

\item{hide}{<\verb{reactive logical}> Should the legend be hidden? Defaults to
\code{shiny::reactive(FALSE)}}

\item{build_str_as_DA}{<\verb{reactive logical}> Should the buildings and streets
be treated as DAs? Defaults to \code{shiny::reactive(TRUE)}.}

\item{breaks}{<\verb{reactive numeric vector}> Breaks if they need to be manually
supplied to the legend module.}
}
\value{
The legend Shiny UI and server functions
}
\description{
The height of the legend plot is determined based on the the class of the
\code{vars} object. If the \code{bivar} string is detected in in the class, then the
height is set to 150 pixels. In all other cases, the height is 60 pixels.
This ensures that the plot legend is sized appropriately for the content
of the plot (\code{bivar} plot is displayed as a 3x3 blocks square). Around the
\code{\link[curbcut]legend_render} function, there is a tryCatch used to
catch any errors that occur when rendering the legend. If an error occurs,
the error message is printed to the console and the function returns
\code{NULL}. This ensures that the Shiny application continues to function
even if there is an error with the legend module.
}
\section{Functions}{
\itemize{
\item \code{legend_UI()}: Create the UI for the legend module

}}
