% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/legend_module.R
\name{legend_server}
\alias{legend_server}
\alias{legend_UI}
\title{Create the UI and server logic for the legend module}
\usage{
legend_server(
  id,
  r,
  vars,
  df,
  data,
  hide = shiny::reactive(FALSE),
  breaks = shiny::reactive(NULL),
  scales_as_DA = shiny::reactive(c("building", "street"))
)

legend_UI(id)
}
\arguments{
\item{id}{<\code{character}> The ID of the page in which the legend will appear,
e.g. \code{canale}.}

\item{r}{<\code{reactiveValues}> The reactive values shared between modules and
pages. Created in the \code{server.R} file.}

\item{vars}{<\verb{named list}> Named list with a class. Object built using the
\code{\link{vars_build}} function. The class of the vars object is
used to determine which type of legend to draw.}

\item{df}{<\verb{reactive character}> The combination of the region under study
and the scale at which the user is on, e.g. \code{CMA_CSD}. The output of
\code{\link{update_df}}.}

\item{data}{<\verb{reactive data.frame}> Data frame containing all the scale and
the \code{var_left} and \code{var_right}. The output of \code{\link{data_get}}.}

\item{hide}{<\verb{reactive logical}> Should the legend be hidden? Defaults to
\code{shiny::reactive(FALSE)}}

\item{breaks}{<\verb{reactive numeric vector}> Breaks if they need to be manually
supplied to the legend module.}

\item{scales_as_DA}{<\verb{character vector}> A character vector of \code{scales} that
should be handled as a "DA" scale, e.g. \code{building} and \code{street}. By default,
their colour will be the one of their DA.}
}
\value{
The legend Shiny UI and server module functions
}
\description{
The height of the legend plot is determined based on the class of the \code{vars}
object. If the string \code{bivar} is detected in the class, the height is set to
150 pixels to accommodate a larger legend required for a \code{bivar} plot
(displayed as a 3x3 blocks square). In all other cases, the height is set to
60 pixels, ensuring that the legend is sized appropriately for the content
of the plot. The tryCatch function is used to catch any errors that occur
when rendering the legend with the \code{\link{legend_render}}
function. If an error occurs, the error message is printed to the console
and the function returns \code{NULL}. This ensures that the Shiny application
continues to function even if there is an error with the legend module.
}
\details{
The class of the \code{vars} object is important for deciding which type of legend
to draw. If the \code{vars} object has an unrecognized class, the default is that
no legend will be drawn.
}
\section{Functions}{
\itemize{
\item \code{legend_UI()}: Create the UI for the legend module

}}
