% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dyk_module.R
\name{dyk_server}
\alias{dyk_server}
\alias{dyk_UI}
\title{Did You Know Server and UI Module}
\usage{
dyk_server(
  id,
  r,
  vars,
  scale,
  select_id,
  region,
  zoom_levels,
  time,
  poi = shiny::reactive(NULL),
  scales_as_DA = shiny::reactive(c("building", "street"))
)

dyk_UI(id)
}
\arguments{
\item{id}{<\code{character}> The ID of the page in which the module will appear,
e.g. \code{alp}.}

\item{r}{<\code{reactiveValues}> The reactive values shared between modules and
pages. Created in the \code{server.R} file. The output of \code{\link{r_init}}.}

\item{vars}{<\verb{named list}> Named list with a class. Object built using the
\code{\link{vars_build}} function.}

\item{scale}{<\verb{reactive character}> The scale under study. The output of
\code{\link{update_scale}}.}

\item{select_id}{<\code{character}> A string indicating the ID of the currently
selected region (if any). Usually \code{r[[id]]$select_id()}}

\item{region}{<\code{character}> Character string specifying the name of the region.
Usually equivalent of \code{r$region()}.}

\item{zoom_levels}{<\verb{named numeric vector}> A named numeric vector of zoom
levels. Usually one of the \verb{mzl_*}, or the output of
\code{\link{geography_server}}.}

\item{time}{<\verb{reactive numeric vector}> Vector of time values. One of the
outpuit of the \code{\link{vars_build}} function.}

\item{poi}{<\code{reactive}> (Optional) Point of interests. Default is NULL.}

\item{scales_as_DA}{<\verb{character vector}> A character vector of \code{scales}
that should be handled as a "DA" scale, e.g. \code{building} and \code{street}. By default,
their colour will be the one of their DA.}
}
\value{
A Shiny module server function for the DYK module.
}
\description{
This function provides a server module for the "Did You Know" (DYK) section
of the a Curbcut map page. It retrieves and displays interesting facts, based
on \code{vars} and \code{poi} (point of interests). The server module retrieves DYKs and
handles the click events on the links.
}
\section{Functions}{
\itemize{
\item \code{dyk_UI()}: Create the UI for the legend module

}}
